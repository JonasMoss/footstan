/*
    footstan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    footstan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with footstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_gm_poisson_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_gm_poisson");
    reader.add_event(37, 35, "end", "model_gm_poisson");
    return reader;
}

#include <meta_header.hpp>
 class model_gm_poisson : public prob_grad {
private:
    int N_MATCHES;
    int N_TEAMS;
    vector<vector<int> > y;
public:
    model_gm_poisson(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_gm_poisson(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_gm_poisson_namespace::model_gm_poisson";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N_MATCHES", "int", context__.to_vec());
            N_MATCHES = int(0);
            vals_i__ = context__.vals_i("N_MATCHES");
            pos__ = 0;
            N_MATCHES = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N_TEAMS", "int", context__.to_vec());
            N_TEAMS = int(0);
            vals_i__ = context__.vals_i("N_TEAMS");
            pos__ = 0;
            N_TEAMS = vals_i__[pos__++];
            current_statement_begin__ = 4;
            validate_non_negative_index("y", "N_MATCHES", N_MATCHES);
            validate_non_negative_index("y", "4", 4);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(N_MATCHES,4));
            validate_non_negative_index("y", "N_MATCHES", N_MATCHES);
            validate_non_negative_index("y", "4", 4);
            y = std::vector<std::vector<int> >(N_MATCHES,std::vector<int>(4,int(0)));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_limit_1__ = 4;
            for (size_t i_1__ = 0; i_1__ < y_limit_1__; ++i_1__) {
                size_t y_limit_0__ = N_MATCHES;
                for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                    y[i_0__][i_1__] = vals_i__[pos__++];
                }
            }

            // validate, data variables
            current_statement_begin__ = 2;
            check_greater_or_equal(function__,"N_MATCHES",N_MATCHES,0);
            current_statement_begin__ = 3;
            check_greater_or_equal(function__,"N_TEAMS",N_TEAMS,0);
            current_statement_begin__ = 4;
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 8;
            validate_non_negative_index("attack", "N_TEAMS", N_TEAMS);
            num_params_r__ += N_TEAMS;
            current_statement_begin__ = 9;
            validate_non_negative_index("defense", "N_TEAMS", N_TEAMS);
            num_params_r__ += N_TEAMS;
            current_statement_begin__ = 10;
            ++num_params_r__;
            current_statement_begin__ = 11;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_gm_poisson() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("attack")))
            throw std::runtime_error("variable attack missing");
        vals_r__ = context__.vals_r("attack");
        pos__ = 0U;
        validate_non_negative_index("attack", "N_TEAMS", N_TEAMS);
        context__.validate_dims("initialization", "attack", "double", context__.to_vec(N_TEAMS));
        std::vector<double> attack(N_TEAMS,double(0));
        for (int i0__ = 0U; i0__ < N_TEAMS; ++i0__)
            attack[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N_TEAMS; ++i0__)
            try {
            writer__.scalar_unconstrain(attack[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable attack: ") + e.what());
        }

        if (!(context__.contains_r("defense")))
            throw std::runtime_error("variable defense missing");
        vals_r__ = context__.vals_r("defense");
        pos__ = 0U;
        validate_non_negative_index("defense", "N_TEAMS", N_TEAMS);
        context__.validate_dims("initialization", "defense", "double", context__.to_vec(N_TEAMS));
        std::vector<double> defense(N_TEAMS,double(0));
        for (int i0__ = 0U; i0__ < N_TEAMS; ++i0__)
            defense[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N_TEAMS; ++i0__)
            try {
            writer__.scalar_unconstrain(defense[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable defense: ") + e.what());
        }

        if (!(context__.contains_r("baseline")))
            throw std::runtime_error("variable baseline missing");
        vals_r__ = context__.vals_r("baseline");
        pos__ = 0U;
        context__.validate_dims("initialization", "baseline", "double", context__.to_vec());
        double baseline(0);
        baseline = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(baseline);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable baseline: ") + e.what());
        }

        if (!(context__.contains_r("homefield")))
            throw std::runtime_error("variable homefield missing");
        vals_r__ = context__.vals_r("homefield");
        pos__ = 0U;
        context__.validate_dims("initialization", "homefield", "double", context__.to_vec());
        double homefield(0);
        homefield = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(homefield);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable homefield: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            vector<local_scalar_t__> attack;
            size_t dim_attack_0__ = N_TEAMS;
            attack.reserve(dim_attack_0__);
            for (size_t k_0__ = 0; k_0__ < dim_attack_0__; ++k_0__) {
                if (jacobian__)
                    attack.push_back(in__.scalar_constrain(lp__));
                else
                    attack.push_back(in__.scalar_constrain());
            }

            vector<local_scalar_t__> defense;
            size_t dim_defense_0__ = N_TEAMS;
            defense.reserve(dim_defense_0__);
            for (size_t k_0__ = 0; k_0__ < dim_defense_0__; ++k_0__) {
                if (jacobian__)
                    defense.push_back(in__.scalar_constrain(lp__));
                else
                    defense.push_back(in__.scalar_constrain());
            }

            local_scalar_t__ baseline;
            (void) baseline;  // dummy to suppress unused var warning
            if (jacobian__)
                baseline = in__.scalar_constrain(lp__);
            else
                baseline = in__.scalar_constrain();

            local_scalar_t__ homefield;
            (void) homefield;  // dummy to suppress unused var warning
            if (jacobian__)
                homefield = in__.scalar_constrain(lp__);
            else
                homefield = in__.scalar_constrain();


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body

            current_statement_begin__ = 18;
            lp_accum__.add(normal_log<propto__>(baseline, 0, 1));
            current_statement_begin__ = 19;
            lp_accum__.add(normal_log<propto__>(homefield, 0, 1));
            current_statement_begin__ = 20;
            lp_accum__.add(normal_log<propto__>(attack, 0, 1));
            current_statement_begin__ = 21;
            lp_accum__.add(normal_log<propto__>(defense, 0, 1));
            current_statement_begin__ = 24;
            for (int i = 1; i <= N_MATCHES; ++i) {
                {
                current_statement_begin__ = 25;
                int home_index(0);
                (void) home_index;  // dummy to suppress unused var warning

                stan::math::fill(home_index, std::numeric_limits<int>::min());
                stan::math::assign(home_index,get_base1(get_base1(y,i,"y",1),3,"y",2));
                current_statement_begin__ = 26;
                int away_index(0);
                (void) away_index;  // dummy to suppress unused var warning

                stan::math::fill(away_index, std::numeric_limits<int>::min());
                stan::math::assign(away_index,get_base1(get_base1(y,i,"y",1),4,"y",2));
                current_statement_begin__ = 27;
                local_scalar_t__ home_attack;
                (void) home_attack;  // dummy to suppress unused var warning

                stan::math::initialize(home_attack, DUMMY_VAR__);
                stan::math::fill(home_attack,DUMMY_VAR__);
                stan::math::assign(home_attack,get_base1(attack,home_index,"attack",1));
                current_statement_begin__ = 28;
                local_scalar_t__ home_defense;
                (void) home_defense;  // dummy to suppress unused var warning

                stan::math::initialize(home_defense, DUMMY_VAR__);
                stan::math::fill(home_defense,DUMMY_VAR__);
                stan::math::assign(home_defense,get_base1(defense,home_index,"defense",1));
                current_statement_begin__ = 29;
                local_scalar_t__ away_attack;
                (void) away_attack;  // dummy to suppress unused var warning

                stan::math::initialize(away_attack, DUMMY_VAR__);
                stan::math::fill(away_attack,DUMMY_VAR__);
                stan::math::assign(away_attack,get_base1(attack,away_index,"attack",1));
                current_statement_begin__ = 30;
                local_scalar_t__ away_defense;
                (void) away_defense;  // dummy to suppress unused var warning

                stan::math::initialize(away_defense, DUMMY_VAR__);
                stan::math::fill(away_defense,DUMMY_VAR__);
                stan::math::assign(away_defense,get_base1(defense,away_index,"defense",1));


                current_statement_begin__ = 31;
                lp_accum__.add(poisson_log_log<propto__>(get_base1(get_base1(y,i,"y",1),1,"y",2), (((baseline + homefield) + home_attack) - away_defense)));
                current_statement_begin__ = 32;
                lp_accum__.add(poisson_log_log<propto__>(get_base1(get_base1(y,i,"y",1),2,"y",2), ((baseline + away_attack) - home_defense)));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("attack");
        names__.push_back("defense");
        names__.push_back("baseline");
        names__.push_back("homefield");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N_TEAMS);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_TEAMS);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_gm_poisson_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> attack;
        size_t dim_attack_0__ = N_TEAMS;
        for (size_t k_0__ = 0; k_0__ < dim_attack_0__; ++k_0__) {
            attack.push_back(in__.scalar_constrain());
        }
        vector<double> defense;
        size_t dim_defense_0__ = N_TEAMS;
        for (size_t k_0__ = 0; k_0__ < dim_defense_0__; ++k_0__) {
            defense.push_back(in__.scalar_constrain());
        }
        double baseline = in__.scalar_constrain();
        double homefield = in__.scalar_constrain();
            for (int k_0__ = 0; k_0__ < N_TEAMS; ++k_0__) {
            vars__.push_back(attack[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < N_TEAMS; ++k_0__) {
            vars__.push_back(defense[k_0__]);
            }
        vars__.push_back(baseline);
        vars__.push_back(homefield);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_gm_poisson";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= N_TEAMS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "attack" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N_TEAMS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "defense" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "baseline";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "homefield";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= N_TEAMS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "attack" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N_TEAMS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "defense" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "baseline";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "homefield";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef model_gm_poisson_namespace::model_gm_poisson stan_model;


#endif
